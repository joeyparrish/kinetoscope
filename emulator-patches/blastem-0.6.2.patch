commit de6b8db6902bcccdb172e4fec1f360b3b3df107e
Author: Joey Parrish <joey.parrish@gmail.com>
Date:   Wed Mar 27 07:39:28 2024 -0700

    Emulate Kinetoscope hardware in BlastEm 0.6.2
    
    Patch based on https://github.com/libretro/blastem revision 277e4a62

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..8f39f7f
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,8 @@
+*.o
+*.sw*
+blastem
+dis
+termhelper
+vgmplay
+zdis
+kinetoscope
diff --git a/Makefile b/Makefile
index 0dddc9f..c69ff64 100644
--- a/Makefile
+++ b/Makefile
@@ -221,6 +221,7 @@ endif
 
 MAINOBJS=blastem.o system.o genesis.o debug.o gdb_remote.o vdp.o $(RENDEROBJS) io.o romdb.o hash.o menu.o xband.o \
 	realtec.o i2c.o nor.o sega_mapper.o multi_game.o megawifi.o $(NET) serialize.o $(TERMINAL) $(CONFIGOBJS) gst.o \
+	kinetoscope/emulator-patches/kinetoscope.o kinetoscope/player/src/segavideo_parser.o \
 	$(M68KOBJS) $(TRANSOBJS) $(AUDIOOBJS) saves.o zip.o bindings.o jcart.o gen_player.o
 
 LIBOBJS=libblastem.o system.o genesis.o debug.o gdb_remote.o vdp.o io.o romdb.o hash.o xband.o realtec.o \
@@ -277,6 +278,8 @@ ifeq ($(MAKECMDGOALS),libblastem.$(SO))
 CFLAGS+= -fpic -DIS_LIB
 endif
 
+CFLAGS+= -I. -Ikinetoscope/player/inc/
+
 all : $(ALL)
 
 libblastem.$(SO) : $(LIBOBJS)
@@ -366,7 +369,7 @@ m68k.c : m68k.cpu cpu_dsl.py
 	$(CC) $(CFLAGS) -c -o $@ $<
 
 %.png : %.xcf
-	xcf2png $< > $@
+	convert $< $@
 
 %.tiles : %.spec
 	./img2tiles.py -s $< $@
diff --git a/build_release b/build_release
index f5faa10..ad3ba82 100755
--- a/build_release
+++ b/build_release
@@ -32,10 +32,8 @@ else
 	make PORTABLE=1 clean all
 	SDLDLLPATH=sdl/i686-w64-mingw32/bin
 fi
-make menu.bin tmss.md
 if [ $OS = "Windows" -o $OS = "Win64" ]; then
 	binaries="dis.exe zdis.exe vgmplay.exe blastem.exe $SDLDLLPATH/SDL2.dll"
-	verstr=`sed -E -n 's/^[^B]+BLASTEM_VERSION "([^"]+)"/blastem \1/p' blastem.c`
 	txt=".txt"
 else
 	binaries="dis zdis vgmplay blastem termhelper"
@@ -44,11 +42,9 @@ else
 	else
 		binaries="$binaries lib"
 	fi
-	verstr=`./blastem -v`
 	txt=""
 fi
-binaries="$binaries menu.bin tmss.md"
-ver=`echo $verstr | awk '/blastem/ { gsub(/\r/, "", $2); print $2 }'`
+ver="0.6.2-kinetoscope"
 if [ $OS = "Windows" ]; then
 	suffix='-win32'
 elif [ $OS = "Win64" ]; then
@@ -66,11 +62,7 @@ cp -r $binaries shaders images default.cfg rom.db gamecontrollerdb.txt systems.c
 for file in README COPYING CHANGELOG; do
 	cp "$file" "$dir"/"$file$txt"
 done
-if [ $OS = "Darwin" ]; then
-	cp SDL-LICENSE "$dir"
-else
-	cp sdl/COPYING.txt "$dir"/SDL-LICENSE$txt
-fi
+cp sdl/LICENSE.txt "$dir"/SDL-LICENSE$txt
 cp glew/LICENSE.txt "$dir"/GLEW-LICENSE$txt
 
 if [ $OS = "Windows" -o $OS = "Win64" ]; then
diff --git a/default.cfg b/default.cfg
index 8274766..2bcfd15 100644
--- a/default.cfg
+++ b/default.cfg
@@ -395,6 +395,9 @@ system {
 	#MegaWiFi allows ROMs to make connections to the internet
 	#so it should only be enabled for ROMs you trust
 	megawifi off
+	#kinetoscope ROMs get a simulated connection, but do not really connect to
+	#the internet, so this is a safe default
+	kinetoscope on
 	#Model of the emulated Gen/MD system, see systems.cfg for a list of options
 	model md1va3
 }
diff --git a/gdb_remote.c b/gdb_remote.c
index 9dbfce4..2effc89 100644
--- a/gdb_remote.c
+++ b/gdb_remote.c
@@ -582,6 +582,6 @@ void gdb_remote_init(void)
 	}
 	socket_close(listen_sock);
 #else
-	disable_stdout_messages();
+	//disable_stdout_messages();
 #endif
 }
diff --git a/img2tiles.py b/img2tiles.py
index c91273c..f637add 100755
--- a/img2tiles.py
+++ b/img2tiles.py
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2.7
 from PIL import Image
 
 def gchannel(Val):
diff --git a/romdb.c b/romdb.c
index 79afa76..e3a7de8 100644
--- a/romdb.c
+++ b/romdb.c
@@ -14,6 +14,7 @@
 #include "megawifi.h"
 #include "jcart.h"
 #include "blastem.h"
+#include "kinetoscope/emulator-patches/kinetoscope.h"
 
 #define DOM_TITLE_START 0x120
 #define DOM_TITLE_END 0x150
@@ -338,6 +339,54 @@ void add_memmap_header(rom_info *info, uint8_t *rom, uint32_t size, memmap_chunk
 			warning("ROM uses MegaWiFi, but it is disabled\n");
 		}
 		return;
+	} else if(!memcmp("SEGA KINETOSCOPE", rom + 0x100, strlen("SEGA KINETOSCOPE"))) {
+		info->mapper_type = MAPPER_NONE;
+		info->map_chunks = base_chunks + 3;
+		info->map = malloc(sizeof(memmap_chunk) * info->map_chunks);
+		memset(info->map, 0, sizeof(memmap_chunk)*3);
+		memcpy(info->map+3, base_map, sizeof(memmap_chunk) * base_chunks);
+
+		info->map[0].start = 0x200000;
+		info->map[0].end   = 0x400000;
+		info->map[0].mask  = 0x1FFFFF;
+		info->map[0].flags = MMAP_READ;
+		uint32_t sram_size = info->map[0].end - info->map[0].start;
+		void* sram_buffer = info->map[0].buffer = calloc(sram_size, 1);
+
+		// In hardware, this whole range will trigger the /TIME signal.
+		info->map[1].start = 0xA13000;
+		info->map[1].end   = 0xA13100;
+		// In our hardware, we use A1-A3 to address various special ports.  A0 (low
+		// byte / high byte) doesn't exist in the cartridge interface.  But we
+		// effectively respond to changes in the bottom 4 bits.
+		// Therefore our port address is 0xA13000 and the mask is 0x00F.
+		// In real hardware, the range would wrap around and 0x...00, 0x...10,
+		// 0x...20, ... would all map to the same port.
+		info->map[1].mask  = 0x00000F;
+
+		info->map[2].start = 0x000000;
+		info->map[2].end   = 0x200000;
+		if (rom_end < info->map[2].end) {
+			info->map[2].end = rom_end;
+		}
+		info->map[2].mask  = 0x1FFFFF;
+		info->map[2].flags = MMAP_READ;
+		info->map[2].buffer = rom;
+
+		if (!strcmp(
+			"on",
+			tern_find_path_default(config, "system\0kinetoscope\0", (tern_val){.ptrval="off"}, TVAL_PTR).ptrval)
+		) {
+			info->map[1].write_16 = kinetoscope_write_16;
+			info->map[1].write_8 = kinetoscope_write_8;
+			info->map[1].read_16 = kinetoscope_read_16;
+			info->map[1].read_8 = kinetoscope_read_8;
+
+			kinetoscope_init(sram_buffer, sram_size);
+		} else {
+			warning("ROM uses kinetoscope, but it is disabled\n");
+		}
+		return;
 	} else if (has_ram_header(rom, size)) {
 		uint32_t ram_start = read_ram_header(info, rom);
 
